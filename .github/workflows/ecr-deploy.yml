name: Deploy to ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 459949229680.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Build image
        env:
          ECR_REGISTRY: 459949229680.dkr.ecr.ap-southeast-1.amazonaws.com
          ECR_REPOSITORY: docker_nodejs_demo
          IMAGE_TAG: nodejs_demo_image
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      

      - name: Run Trivy scan
        run: docker run --rm -v ${{ github.workspace }}:/workdir aquasec/trivy image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      

      - name: Check Trivy results
        id: trivy_results
        run: echo "::set-output name=has_critical::$(docker run --rm -v ${{ github.workspace }}:/workdir aquasec/trivy --format json $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG | jq '.[0].Vulnerabilities[] | select(.Severity == \"CRITICAL\") | .Severity')"

      - name: Block push if critical vulnerabilities found
        if: steps.trivy_results.outputs.has_critical == 'CRITICAL'
        run: |
          echo "Critical vulnerabilities found! Pushing the image to the repository is blocked."
          exit 1

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: 459949229680.dkr.ecr.ap-southeast-1.amazonaws.com
          ECR_REPOSITORY: docker_nodejs_demo
          IMAGE_TAG: nodejs_demo_image
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Log out of Amazon ECR
        run: docker logout $ECR_REGISTRY
